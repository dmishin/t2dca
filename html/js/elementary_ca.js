// Generated by CoffeeScript 1.7.1
(function() {
  var digits, exports, from_digits, from_digits_rev, i, index2table, is_linear, mirror_ca, mirror_ca_index, tfm, tfm_circular, __mirror_3_digits;

  exports = exports != null ? exports : window;

  digits = function(x, n, p) {
    var ds, i, _i;
    if (p == null) {
      p = 2;
    }
    ds = [];
    for (i = _i = 0; _i < n; i = _i += 1) {
      ds.push(x % p);
      x = (x / p) | 0;
    }
    return ds;
  };

  from_digits = function(ds, p) {
    var d, ppow, x, _i, _len;
    if (p == null) {
      p = 2;
    }
    x = 0;
    ppow = 1;
    for (_i = 0, _len = ds.length; _i < _len; _i++) {
      d = ds[_i];
      x = x + d * ppow;
      ppow *= p;
    }
    return x;
  };

  from_digits_rev = function(ds, p) {
    var d, x, _i, _len;
    if (p == null) {
      p = 2;
    }
    x = 0;
    for (_i = 0, _len = ds.length; _i < _len; _i++) {
      d = ds[_i];
      x = x * p + d;
    }
    return x;
  };

  exports.index2table = index2table = function(i) {
    return digits(i, 8);
  };

  index2table.tfm = tfm = function(fld, table) {
    var blk, code, i, ofld, _i, _ref;
    ofld = [];
    for (i = _i = 0, _ref = fld.length - 2; _i < _ref; i = _i += 1) {
      blk = fld.slice(i, i + 3);
      blk.reverse();
      code = from_digits(blk);
      ofld.push(table[code]);
    }
    return ofld;
  };

  exports.tfm_circular = tfm_circular = function(fld, table) {
    return tfm([fld[fld.length - 1]].concat(fld, [fld[0]]), table);
  };

  is_linear = function(table) {
    var x1, x2, _i, _j;
    for (x1 = _i = 0; _i < 8; x1 = ++_i) {
      for (x2 = _j = 0; _j < 8; x2 = ++_j) {
        if (table[x1] ^ table[x2] !== table[x1 ^ x2]) {
          return false;
        }
      }
    }
    return true;
  };

  __mirror_3_digits = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; _i < 8; i = ++_i) {
      _results.push(from_digits_rev(digits(i, 3)));
    }
    return _results;
  })();

  mirror_ca = function(table) {
    var _i, _results;
    _results = [];
    for (i = _i = 0; _i < 8; i = ++_i) {
      _results.push(table[__mirror_3_digits[i]]);
    }
    return _results;
  };

  mirror_ca_index = function(idx) {
    return from_digits(mirror_ca(index2table(idx)));
  };

}).call(this);

//# sourceMappingURL=elementary_ca.map
